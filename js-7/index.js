/* 
    1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). Эта функция принимает в себя целое число со значением длины ребра куба. Ответ выведите в формате строки, который изображен в примерах.

    Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"

    НЕ ИСПОЛЬЗУЙТЕ ОПЕРАТОР СТЕПЕНИ ** - в онлайн среде браузера он не работает и тесты будут ломаться. Это из-за того, что этот оператор из более нового стандарта, чем тут доступен.

    Примеры:

    calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'

    calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'

    calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'

    calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'

    calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'

    2) Постепенно переходим к более реалистичным задачам :) Вы обнаружите, что там используется все тоже самое.

    Напишите функцию, которая будет определять номер купе по переданному ей номеру места. 

    Функция принимает только целое число от 1 до 36.

    Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение:

    "Ошибка. Проверьте правильность введенного номера места"

    Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"

    Пример:

    getCoupeNumber(33)  => 9

    getCoupeNumber(7)  => 2

    getCoupeNumber(300)  => "Таких мест в вагоне не существует"

    getCoupeNumber(0)  => "Таких мест в вагоне не существует"

    getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"

    getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"

    getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места"
*/

// Место для первой задачи
function calculateVolumeAndArea(n) {
    if(Number.isInteger(n)){
        let s = 6 * (n *n),
            v = n * n * n;
        return ` 'Объем куба: ${v}, площадь всей поверхности: ${s}`;
    } else {
        return 'При вычислении произошла ошибка';
    }
}
console.log(calculateVolumeAndArea(4.3));


// Место для второй задачи
function getCoupeNumber(n) {
    if(Number.isInteger(n)){
        switch(true){
            case n>0 && n<=4:
                return 1;
            case n>4 && n<=8:
                return 2;
            case n>8 && n<=12:
                return 3;
            case n>12 && n<=16:
                return 4;
            case n>16 && n<=20:
                return 5;
            case n>20 && n<=24:
                return 6;
            case n>24 && n<=28:
                return 7;
            case n>28 && n<=32:
                return 8;
            case n>32 && n<=36:
                return 9;
            default: 
                return "Таких мест в вагоне не существует";
        }
    } else{
        return "Ошибка. Проверьте правильность введенного номера места";
    }
}
console.log(getCoupeNumber(3.3));


/* 
    1) Создайте функцию, которая принимает в себя целое число минут и возвращает время в нужном формате строки. (Смотри пример). 
    Обратите внимание на окончание слова "час" - оно меняется в зависимости от цифры. Если вместо аргумента приходит не число, 
    дробное или отрицательное число - функция возвращает строку "Ошибка, проверьте данные"

    Внимание! Давайте пока ограничимся максимум 600ю минутами (10 часов). Так как проверки на большие числа будут
    раздувать код (33 часа, 31 час, 11 часов и тд). Этого будет достаточно и код будет проверять именно этот промежуток
    (1 - 10 часов). Но вы можете реализовать и полный скрипт, он тоже должен проходить тесты.

    Пример:

    getTimeFromMinutes(150) => "Это 2 часа и 30 минут"

    getTimeFromMinutes(50) => "Это 0 часов и 50 минут"

    getTimeFromMinutes(0) => "Это 0 часов и 0 минут"

    getTimeFromMinutes(-150) => "Ошибка, проверьте данные" 
*/

//Место для первой задачи
function getTimeFromMinutes(time) {
    if(typeof time !== 'number' || time < 0 || time > 600){
        return 'Ошибка, проверьте данные';
    }

    let hours = Math.floor(time / 60);
    let remainingMinutes = time % 60;

    let timeMessage;
    switch(hours % 10){
        case 1: timeMessage = 'час';
        break;
        case 2:
        case 3:
        case 4:
            timeMessage = 'часа';
            break;
        default:
            timeMessage = 'часов';
    }
    return `Это ${hours} ${timeMessage} и ${remainingMinutes} минут`;
}
console.log(getTimeFromMinutes(83));


/*
    2) Напишите функцию, которая принимает в себя 4 числа и возвращает самое большее из них.
    Если один из аргументов не является числом или их меньше 4 - возвращается 0. Дробные числа разрешены.

    Пример:

    findMaxNumber(1, 5, 6.6, 11); =>  11

    findMaxNumber(1, 5, '6', '10');  =>  0
*/

// Место для второй задачи
function findMaxNumber(num1, num2, num3, num4) {
    let res = Math.max(num1, num2, num3, num4);
    if(num1 < 4 || num2 < 4 || num3 < 4 || num4 < 4){
        return res = 0;
    }
    return res;
}
console.log(findMaxNumber(61,5.5,7.5,4));


/*
    Создайте функцию, которая будет принимать в себя один аргумент-целое положительное число. 
    Она должна возвращать строку, в которой будут через пробел выведены числа Фибоначчи. 
    Причем, их количество должно быть равно переданному аргументу. 

    Если переданный аргумент не число - вернуть пустую строку. Решать без применения рекурсии.

    Пример:

    fib(4) => "0 1 1 2"

    fib(7) => "0 1 1 2 3 5 8"

    fib('7') => ""

    fib(1) => "0"

    fib(0) => ""
    Fn = Fn-1 + Fn-2
*/

let fibNumber = [0, 1];
function fib(number) {
    if(number === 0 || typeof number !== 'number'){
        return "";
    } else if (number === 1){
        return "0";
    } else{
        for( let i = 2; i<number; i++){
            fibNumber[i] = fibNumber[i-1] + fibNumber[i-2];
        }
        return fibNumber.slice(0, number).join(" ");
    }
    
}
console.log(fib(7));



function fib(n) {
    if (typeof n !== 'number' || n <   1) {
      return "";
    }

    let prev =   0;
    let current =   1;
    let result = "0";
  
    for (let i =  0; i < n; i++) {
      let temp = current;
      current = prev + current;
      prev = temp;

      if (i < n -  1) {
        result += " " + current;
      }
    }
  
    if (n >   1) {
      result += " " + current;
    }
  
    return result;
  }


  console.log(fib(1)); // "0"
  console.log(fib(2)); // "0  1"
  console.log(fib(3)); // "0  1  1"
  console.log(fib(4)); // "0  1  1  2"
  console.log(fib(5)); // "0  1  1  2  3"
  console.log(fib(6)); // "0  1  1  2  3  5"
  console.log(fib(7)); // "0  1  1  2  3  5  8"
  console.log(fib('7')); // ""
  console.log(fib(1)); // "0"
  console.log(fib(0)); // ""